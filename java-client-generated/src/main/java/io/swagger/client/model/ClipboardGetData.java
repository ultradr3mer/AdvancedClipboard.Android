/*
 * AdvancedClipboard
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
/**
 * ClipboardGetData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-20T22:57:25.528Z[GMT]")
public class ClipboardGetData {
  @SerializedName("contentTypeId")
  private UUID contentTypeId = null;

  @SerializedName("fileContentUrl")
  private String fileContentUrl = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("textContent")
  private String textContent = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("mimeType")
  private String mimeType = null;

   /**
   * Get contentTypeId
   * @return contentTypeId
  **/
  @Schema(description = "")
  public UUID getContentTypeId() {
    return contentTypeId;
  }

   /**
   * Get fileContentUrl
   * @return fileContentUrl
  **/
  @Schema(description = "")
  public String getFileContentUrl() {
    return fileContentUrl;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

   /**
   * Get textContent
   * @return textContent
  **/
  @Schema(description = "")
  public String getTextContent() {
    return textContent;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @Schema(description = "")
  public String getFileName() {
    return fileName;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @Schema(description = "")
  public String getMimeType() {
    return mimeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClipboardGetData clipboardGetData = (ClipboardGetData) o;
    return Objects.equals(this.contentTypeId, clipboardGetData.contentTypeId) &&
        Objects.equals(this.fileContentUrl, clipboardGetData.fileContentUrl) &&
        Objects.equals(this.id, clipboardGetData.id) &&
        Objects.equals(this.textContent, clipboardGetData.textContent) &&
        Objects.equals(this.fileName, clipboardGetData.fileName) &&
        Objects.equals(this.mimeType, clipboardGetData.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentTypeId, fileContentUrl, id, textContent, fileName, mimeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClipboardGetData {\n");
    
    sb.append("    contentTypeId: ").append(toIndentedString(contentTypeId)).append("\n");
    sb.append("    fileContentUrl: ").append(toIndentedString(fileContentUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    textContent: ").append(toIndentedString(textContent)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
